{"version":3,"file":"kr-payment-form-glue.min.js","mappings":"mBAAA,iBAAgBA,EAASC,EAAcC,GAAuB,IAAnBC,EAAmB,uDAAR,IAChDC,EAAgB,SAAhBA,IACEJ,EAAQC,GACVC,IAEAG,WAAWD,EAAeD,EAE7B,EAEDE,WAAWD,EAAe,EAT5B,E,sKCgGA,YA9FME,WACJ,aAEE,O,4FAFY,SAENA,EAAKC,SAAiBD,EAAKC,UAEjCD,EAAKC,SAAWC,KAEhBA,KAAKC,MAAQ,eACbD,KAAKE,cAAgB,CAAC,EACtBF,KAAKG,OAAS,KACdH,KAAKI,UAAY,KACjBJ,KAAKK,UAAY,KACjBL,KAAKM,QAAS,EACdN,KAAKO,SAAU,EAERP,KACR,C,+CAED,SAAYG,EAAQE,GAA6B,IAAlBD,EAAkB,uDAAN,KACnCI,EACJ,0EACIC,EAAc,iCAEpB,OAAIT,KAAKM,OAAeN,KAAKU,WAAWL,GACnCF,EACAE,EAEAG,EAAYG,KAAKR,GAKjBM,EAAYE,KAAKN,IAKtBL,KAAKG,OAASA,EACdH,KAAKK,UAAYA,EACjBL,KAAKI,UAAYA,EAEbJ,KAAKG,QAAUH,KAAKK,UAAkBL,KAAKY,oBAExCC,QAAQC,OAAO,kCAVpBC,QAAQC,MAAM,wDACPH,QAAQC,OAAR,WAAmBT,EAAnB,kCANPU,QAAQC,MAAM,+CACPH,QAAQC,OAAR,WAAmBX,EAAnB,sCAJcU,QAAQC,OAAO,0BADlBD,QAAQC,OAAO,qBAoBpC,G,+BAED,WAAoB,WAClB,IAAKd,KAAKO,QAAS,CACjB,IAAMF,EAAYL,KAAKK,UACnBF,EAASH,KAAKG,OAClBH,KAAKO,SAAU,EAEf,IAAMU,EAASC,SAASC,cAAc,UACtCF,EAAOG,KAAO,kBAGT,SAAST,KAAKR,KAASA,GAAU,KAEtCc,EAAOI,IAAP,UAAgBlB,EAAhB,+DACAc,EAAOK,aAAa,gBAAiBjB,GACrCY,EAAOK,aAAa,cAAe,QAE/BtB,KAAKI,WAAWa,EAAOK,aAAa,gBAAiBtB,KAAKI,YAG9Cc,SAASK,cAAT,sBAAsCN,EAAOI,IAA7C,QAGAH,SAASM,KAAMN,SAASM,KAAKC,YAAYR,GAC/CC,SAASM,MAAMT,QAAQW,KAAK,6BACvC,CAED,OAAO,IAAIb,SAAQ,SAAAc,GACjBC,EAAYC,OAAQ,MAAM,WACxBD,EAAYC,OAAOC,GAAI,SAAS,WAC9B,EAAKxB,QAAS,EACd,EAAKC,SAAU,EACfoB,EAAQ,CAAEG,GAAID,OAAOC,IACtB,GACF,GACF,GACF,G,wBAED,SAAWzB,GAAW,WACpB,OAAO,IAAIQ,SAAQ,SAACc,EAASb,GACvBT,GAAaA,IAAc,EAAKA,UAClCwB,OAAOC,GAAGC,cAAc,CAAE1B,UAAAA,IAAa2B,KAAKL,GAA5C,MAA2Db,GAE3Da,EAAQ,CAAEG,GAAID,OAAOC,IAExB,GACF,I,yEA3FGhC,ICAgB,oBAAX+B,SACJA,OAAOI,SAAQJ,OAAOI,OAASC,G","sources":["webpack://@lyracom/embedded-form-glue/./app/tools/whenDefined.js","webpack://@lyracom/embedded-form-glue/./app/KryptonGlue.js","webpack://@lyracom/embedded-form-glue/./app/glue.js"],"sourcesContent":["export default (context, variableName, cb, interval = 150) => {\n  let checkVariable = () => {\n    if (context[variableName]) {\n      cb()\n    } else {\n      setTimeout(checkVariable, interval)\n    }\n  }\n\n  setTimeout(checkVariable, 0)\n}\n","import whenDefined from './tools/whenDefined'\n\nclass Glue {\n  constructor() {\n    // Singleton\n    if (!!Glue.instance) return Glue.instance\n\n    Glue.instance = this\n\n    this._name = 'Krypton Glue'\n    this.configuration = {}\n    this.domain = null\n    this.formToken = null\n    this.publicKey = null\n    this.loaded = false\n    this.loading = false\n\n    return this\n  }\n\n  loadLibrary(domain, publicKey, formToken = null) {\n    const domainRegex =\n      /^(?:http(s)?:\\/\\/)[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~:/?#[\\]@!$&'()*+,;=.]+$/g\n    const pubKeyRegex = /^\\d{2,8}:(|test)publickey_.+$/g\n\n    if (this.loaded) return this.getKrypton(publicKey)\n    if (!domain) return Promise.reject('Domain not defined')\n    if (!publicKey) return Promise.reject('Public key not defined')\n\n    if (!domainRegex.test(domain)) {\n      console.error('Domain format should be https://domain.name')\n      return Promise.reject(`[${domain}] is not a valid endpoint domain`)\n    }\n\n    if (!pubKeyRegex.test(publicKey)) {\n      console.error('Public key format should be shopId:[test]publickey_*')\n      return Promise.reject(`[${publicKey}] is not a valid public key`)\n    }\n\n    this.domain = domain\n    this.publicKey = publicKey\n    this.formToken = formToken\n\n    if (this.domain && this.publicKey) return this.loadKryptonClient()\n\n    return Promise.reject('The library cannot be loaded')\n  }\n\n  loadKryptonClient() {\n    if (!this.loading) {\n      const publicKey = this.publicKey\n      let domain = this.domain\n      this.loading = true\n\n      const script = document.createElement('script')\n      script.type = 'text/javascript'\n\n      // Domain must end with slash\n      if (!/^.+\\/$/.test(domain)) domain += '/'\n\n      script.src = `${domain}static/js/krypton-client/V4.0/stable/kr-payment-form.min.js`\n      script.setAttribute('kr-public-key', publicKey)\n      script.setAttribute('kr-spa-mode', 'true')\n\n      if (this.formToken) script.setAttribute('kr-form-token', this.formToken)\n\n      // Check if the library is already present\n      const $script = document.querySelector(`script[src=\"${script.src}\"]`)\n\n      // Append it to body if it's not already loaded\n      if (!$script && document.body) document.body.appendChild(script)\n      else if (!document.body) console.warn('document.body is undefined')\n    }\n\n    return new Promise(resolve => {\n      whenDefined(window, 'KR', () => {\n        whenDefined(window.KR, 'ready', () => {\n          this.loaded = true\n          this.loading = false\n          resolve({ KR: window.KR })\n        })\n      })\n    })\n  }\n\n  getKrypton(publicKey) {\n    return new Promise((resolve, reject) => {\n      if (publicKey && publicKey !== this.publicKey) {\n        window.KR.setFormConfig({ publicKey }).then(resolve).catch(reject)\n      } else {\n        resolve({ KR: window.KR })\n      }\n    })\n  }\n}\n\nexport default new Glue()\n","import KryptonGlue from './KryptonGlue'\n\nif (typeof window !== 'undefined') {\n  if (!window.KRGlue) window.KRGlue = KryptonGlue\n}\n"],"names":["context","variableName","cb","interval","checkVariable","setTimeout","Glue","instance","this","_name","configuration","domain","formToken","publicKey","loaded","loading","domainRegex","pubKeyRegex","getKrypton","test","loadKryptonClient","Promise","reject","console","error","script","document","createElement","type","src","setAttribute","querySelector","body","appendChild","warn","resolve","whenDefined","window","KR","setFormConfig","then","KRGlue","KryptonGlue"],"sourceRoot":""}